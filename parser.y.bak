%code requires{
#include "scanType.h"
}
%{
//Ryan Buckel
//CS445
//Bison parser
//The included vars from scanType are tokenClass, lineNum, tokenStr, cValue, nValue, sValue

#include <stdio.h>

#define YYERROR_VERBOSE
void yyerror (char const *s) {
   fprintf(stderr, "%s\n", s);
}

extern int yylex();
extern FILE *yyin;
//extern int lineNum;
//extern int numErrors;
%}

%union{
   TokenData *tokenData;
}

%token <tokenData> ID BOOLCONST CHARCONST NUMCONST STRINGCONST SYMB

%%
program			: decList
					;

declList			: declist decl
					| decl
					;

decl				: varDecl
					| funDecl
					;

varDecl			: typeSpec varDeclList
					;

scopedVarDecl		: STATIC typeSpec varDeclList
					| typeSpec varDeclList
					;

varDeclList		: varDeclList ',' varDeclInit
					| varDeclInit
					;

varDeclInit		: varDeclId
					| varDeclId ':' simpleExp
					;

varDeclId			: ID
					| ID '[' NUMCONST ']'
					;

typeSpec			: BOOL
					| CHAR
					| INT
					;

funDecl			: typeSpec ID '(' parms ')' compoundStmt
					| ID '(' parms ')' compoundStmt
					;

parms				: parmList
					| /* empty */
					;

parmList			: parmList ';' parmTypeList
					| parmTypeList
					;

parmTypeList		: typeSpec parmIdList
					;

parmIdList			: parmIdList ',' parmId
					| parmId

parmId				: ID
					| ID '[' ']'
					;

stmt				: expStmt
					| compoundStmt
					| selectStmt
					| iterStmt
					| returnStmt
					| breakStmt
					;

expStmt			: exp ';'
					| ';'
					;

compoundStmt		: BEGIN localDecls stmtList END
					;

localDecls			: localDecls scopedVarDecl
					| /* empty */
					;

stmtList			: stmtList stmt
					| /* empty */
					;

selectStmt			: IF simpleExp THEN stmt
					| IF simpleExp THEN stmt ELSE stmt
					;

iterStmt			: WHILE simpleExp DO stmt
					| FOR ID '<-' iterRange DO stmt
					;

iterRange			: simpleExp TO simpleExp
					| simpleExp TO simpleExp BY simpleExp
					;

returnStmt			: RETURN ';'
					| RETURN exp ';'
					;

breakStmt			: BREAK ';'
					;

exp				: mutable assignop exp
					| mutable INC
					| mutable DEC
					| simpleExp
					;

assignop			: "<-"
					| "+="
					| "-="
					| "*="
					| "/="
					;

simpleExp			: simpleExp OR andExp
					| andExp
					;

andExp				: andExp AND unaryRelExp
					| unaryRelExp
					;

unaryRelExp			: NOT unaryRelExp
					| relExp
					;

relExp				: sumExp relop sumExp
					| sumExp
					;

relop				: '<'
					| LEQ
					| '>'
					| GEQ
					| '='
					| NEQ
					;

sumExp				: sumExp sumop mulExp
					| mulExp
					;

sumop				: '+'
					| '-'
					;

mulExp				: mulexp mulop unaryExp
					| mulExp
					;

mulop				: '*'
					| '/'
					| '%'

unaryExp			: unaryop unaryExp
					| factor
					;

unaryop			: '-'
					| '*'
					| '?'
					;

factor				: mutable
					| immutable
					;

mutable			: ID
					| ID '[' exp ']'
					;

immutable			: '(' exp ')'
					| call
					| constant
					;

call				: ID '(' args ')'
					;

args				: argList
					| /* empty */
					;

argList			: arglist ',' exp
					| exp
					;

constant			: NUMCONST
					| CHARCONST
					| STRINGCONST
					| BOOLCONST
					;

%%
extern int yydebug;
int main(int argc, char *argv[]){
   if(argc > 1){
      if(yyin = fopen(argv[1], "r")){
         //opened
      } else {
         printf("Failed to open file.\n");
      }
   }
   
   //numErrors = 0;
   //call parse
   yyparse();

   //printf("Number of errors: %d\n", numErrors);
   
   return 0;
}
